import ccxt
import time
import talib
import numpy as np

bitmex = ccxt.bitmex({
    'apiKey': 'fw8sCTwqzKadf2iUtN2VlweC',
    'secret': '_vT9GeGOb_2hHufAkuVS_D4nZw9hGpzkMJhRJd13u08Wsgp9',
})

bitmex.urls['api'] = bitmex.urls['test']

limit = 100

params = {
    # 'startTime': '2018-09-10T08:04:15',
    # 'endTime': '2018-09-13T08:04:15',
    'partial': False
}

# 获取市场实时行情
def time_market():

    markets = bitmex.public_get_instrument({
        'symbol': 'XBTUSD',
    })

    for item in markets:
        print('实际价%s标记价%s时间%s' % (item['lastPrice'], item['markPrice'], item['timestamp']))

# 获取实时K线数据
def get_data():

    data_list = []

    since = bitmex.milliseconds() - limit * 60 * 500  # 循环获取当前时间减去要求的时间

    ohlcv = bitmex.fetch_ohlcv(symbol='BTC/USD', timeframe='1m', since=since, params=params)
    # 获取最近20分钟收盘价在列表中
    for item in ohlcv:
        data_list.append(item[4])
    # 将k线图信息转化为数组
    close_list = np.array(data_list)

    num_ohlcv = len(ohlcv)
    # 打印获取的最近1分钟K线信息
    print('{}: O: {} H: {} L:{} C:{}'.format(
            time.strftime('"%Y-%m-%d %H:%M:%S"', time.localtime(ohlcv[num_ohlcv - 1][0] / 1000)),
            ohlcv[num_ohlcv - 1][1],
            ohlcv[num_ohlcv - 1][2],
            ohlcv[num_ohlcv - 1][3],
            ohlcv[num_ohlcv - 1][4]))
        # * 5 to make distinct delay and to avoid too much load
        # / 1000 to convert milliseconds to fractional seconds

    return close_list


# 转化并获取指标数据
def create_RSI(close_list):

    real = talib.RSI(close_list, timeperiod=5)
    print('当前RSI值：%s' % real[-1])
    return real[-1]


# 获取当前仓位信息
def user_position():

    position = bitmex.private_get_position()

    if position[0]['isOpen']:
        print('USD:%s BTC:%s markprice:%s' % (position[0]['currentQty'], position[0]['currentCost'], position[0]['markPrice']))
    else:
        return 0


# 获取市场交易信号
def order_signal(rsi):

    if rsi >= 50:

        return -1

    elif rsi < 50:

        return 1


#主订单函数
def order_create_system(signal):

    # if signal == 1:
    #     print('USD:%s BTC:%s markprice:%s' % (position[0]['currentQty'], position[0]['currentCost'], position[0]['markPrice']))
    if signal == 1:
        print('买多成功')
    elif signal == -1:
        print('卖空成功')


if __name__ == '__main__':

    while True:

        time_market()

        close_list = get_data()

        rsi = create_RSI(close_list)

        pos = user_position()

        if pos == 0:  # 空仓状态下
            signal = order_signal(rsi)
            order_create_system(signal)
        else:   # 如何将已有单卖出去
            pass

        time.sleep(bitmex.rateLimit * 5 / 1000)
    # order_signal()


