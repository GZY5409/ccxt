import ccxt
import time
import talib
import numpy as np

bitmex = ccxt.bitmex({
    'apiKey': 'fw8sCTwqzKadf2iUtN2VlweC',
    'secret': '_vT9GeGOb_2hHufAkuVS_D4nZw9hGpzkMJhRJd13u08Wsgp9',
})

bitmex.urls['api'] = bitmex.urls['test']

limit = 100

params = {
    # 'startTime': '2018-09-10T08:04:15',
    # 'endTime': '2018-09-13T08:04:15',
    'partial': False
}

# 获取市场实时行情
def time_market():

    markets = bitmex.public_get_instrument({
        'symbol': 'XBTUSD',
    })

    for item in markets:
        print('实际价%s标记价%s时间%s' % (item['lastPrice'], item['markPrice'], item['timestamp']))
        # close = item['markPrice']

        # real = talib.RSI(np.array(int(close)), timeperiod=14)
        # print(real)


def get_data():

    since = bitmex.milliseconds() - limit * 60 * 100  # 循环获取当前时间

    ohlcv = bitmex.fetch_ohlcv(symbol='BTC/USD', timeframe='1m', since=since, params=params)
    num_ohlcv = len(ohlcv)
    print(ohlcv)
    # 打印获取的最新K线信息
    print('{}: O: {} H: {} L:{} C:{}'.format(
            time.strftime('"%Y-%m-%d %H:%M:%S"', time.localtime(ohlcv[num_ohlcv - 1][0] / 1000)),
            ohlcv[num_ohlcv - 1][1],
            ohlcv[num_ohlcv - 1][2],
            ohlcv[num_ohlcv - 1][3],
            ohlcv[num_ohlcv - 1][4]))
        # * 5 to make distinct delay and to avoid too much load
        # / 1000 to convert milliseconds to fractional seconds
    # time.sleep(bitmex.rateLimit * 5 / 1000)



def create_RSI(array):
    real = talib.RSI(array, timeperiod=14)
    print(real)
#获取市场交易信号
def order_signal():
    pass

#主订单函数
def order_create_system():
    pass


if __name__ == '__main__':

    # order_create_system()
    time_market()
    get_data()
    # create_RSI(array)


